#나의 풀이
실패율 = 스테이지에 도달 했으나 아직 클리어 하지 못한 플레이어의 수 / 스테이지에 도달한 플레이어의 수

전체 스테이지 개수 N
게임을 이용하는 사용자가 현재 멈춰있는 스테이지의 번호가 담긴 배열 stages

실패율이 높은 스테이지 부터 내림차순으로 return

스테이지에 도달한 유저가 없는 경우 해당 스테이지의 실패율은 0

n = 5
stages = [2,1,2,6,2,4,3,3] : 각 스테이지에 도전중인 사용자들
1번 스테이지에 도전중인 사람들 = 각 원소 -1씩 한거 다 합친거 : 8명

실패율 구하기 : 1번 스테이지 이므로 원소 값이 1인 경우는 실패한 사용자
-> 실패한 사용자 빼고 나머지 성공한 사람들 / 총 도전중인 사람
-> 실패율 = 1/8

2번 스테이지에 도전중인 사람들 = 일단 원소가 2보다 커야 해
: 각 원소 -1씩 한거 다 합친거 : 7명

실패율 구하기 : 원소값이 2인 경우 : 3
-> 실패율 = 3/7

3번 스테이지에 도전중인 사람들 = 일단 원소가 3보다 커야 해 = 4명
실패율 구하기 : 원소값이 3인 경우 합함 -> 2명이 실패
-> 실패율 = 2/4

4번 스테이지에 도전중인 사람들 = 일다 원소가 4보다 커야 해 = 1명
따라서 아무도 도전 못했으므로 실패율 = 0

def solution(n, stages):
    fail_rate = []
    fail = 0 # 실패율 
    p=0 # 해당 스테이지에 도전중인 사용자의 수 
    f=0 # 해당 스테이지에서 실패한 사용자의 수 
    for i in range(1,n+1):
        for j in stages:
            
            if j >= i :
                p += 1
                
            else:
                pass
            if j == i:
                f += 1
                
            else: 
                pass
        if p==0:
            fail_rate.append(0)
        else:    
            fail = (f/p)         
            fail_rate.append(fail)
        f = 0
        p = 0
        
    
    number = list(range(1,n+1))
    a=[]
    for x in zip(fail_rate,number):
        a.append(x)
    
    b = sorted(a,key=lambda x:x[0],reverse=True)
    
    c=[]
    for i in range(len(b)):
        c.append(b[i][1])

    return c
