"""
문제 유형: dfs
문제 링크: https://www.acmicpc.net/problem/2667
풀이 : 
1. 주변 지점 중에서 값이 1 이면서 아직 방문하지 않았다면 방문 처리 함 
2. 방문한 지점에서 상,하,좌,우를 살펴보며 방문을 진행하는 과정을 반복하면 연결된 모든 지점을 방문할 수 있다. 
3. 방문하지 않은 지점을 만나면, 집의 수 + 1 하고, 모든 탐색이 끝나면 단지수 +1 해준다. 
링크:https://github.com/jsyun0412/CodingTest/blob/3b67602287282c591d79d13042d77a833ffd0b6b/%EB%B0%B1%EC%A4%80/DFS/%5B2667%5D%EB%8B%A8%EC%A7%80%EB%B2%88%ED%98%B8%EB%B6%99%EC%9D%B4%EA%B8%B0
"""
n=int(input())

graph=[]
for i in range(n):
    graph.append(list(map(int,input())))


def dfs(x,y):
    if x <= -1 or x >= n or y <= -1 or y >= n:
        return False
    
    if graph[x][y] == 1:
        
        global cnt #단지에 속하는 집의 수
        cnt += 1 

        graph[x][y] = 0

        dfs(x-1,y)
        dfs(x,y-1)
        dfs(x+1,y)
        dfs(x,y+1)
        return True
    return False

a=[]
cnt=0
result = 0

for i in range(n):
    for j in range(n):
        if dfs(i,j) == True:
            a.append(cnt)
            result += 1 #단지의 개수 
            cnt = 0
a.sort()

print(result)
for i in range(len(a)):
    print(a[i])
