import sys
from collections import deque

n,m=map(int,input().split())
graph = [list(map(int,input().split())) for _ in range(n)]
visited = [[False] * m for _ in range(n)]

def bfs(x,y):
    #함수가 실행될때마다 num을 1로 초기화 해주자. 아니면 값이 계속 누적된다.
    num = 1
    q = deque()
    q.append((x,y))
    visited[x][y] = True

    while q:
        x,y = q.popleft() 

        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]

            if 0 <= nx < n and 0 <= ny < m:
                if graph[nx][ny] == 1 and not visited[nx][ny]:
                    visited[nx][ny] = True
                    q.append((nx,ny))
                    #BFS 함수 내부에서 원소를 pop할때 num+=1을 해준다.
                    num += 1
    return num 



dx = [0,0,-1,1]
dy = [1,-1,0,0]

cnt = 0
max_count = 0
for i in range(n):
    for j in range(m):
        #외부에서 모든 좌표를 하나씩 넣을 때 BFS를 사용하는 조건이 충족되면 cnt+=1 해준다.
        if graph[i][j] == 1 and not visited[i][j]:
            cnt += 1
            # 최대값을 갱신해줄 때 굳이 파라미터로 넣지 않아도 return num을 해주고 
            # 나오는 값과 max로 비교해주면 나중에 제일 큰 값만 빼낼 수 있다
            max_count = max(max_count,bfs(i,j)) 
            #return num과 최초 0으로 정의한 max_count 중 큰 값으로 갱신하면서 
            #반복문이 끝나면 가장 높은 값을 출력한다.
print(cnt)
print(max_count)
